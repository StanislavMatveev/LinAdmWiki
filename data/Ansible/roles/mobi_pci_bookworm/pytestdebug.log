versions pytest-6.0.1, py-1.9.0, python-3.8.2.final.0
cwd=/home/whiner/my/molecule/mobi_pci_buster
args=('--debug', '--force-ansible', '--hosts=ansible://pci/')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f4316e42ee0>
    pytest_plugin_registered [hook]
        plugin: <Session mobi_pci_buster exitstatus=None testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f4316e42ee0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f4316cc03d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f4316cc0070>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x7f4316e42ee0>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f4316cc0040>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f4316cc0940>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f4316e42ee0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'testinfra.plugin' from '/home/whiner/.local/lib/python3.8/site-packages/testinfra/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f4316cc03d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f4316cc0070>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f4316cc0040>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f4316cc0940>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f4316c7fdf0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f4316c19910>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f4316e42ee0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'testinfra.plugin' from '/home/whiner/.local/lib/python3.8/site-packages/testinfra/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f4316cc03d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f4316cc0070>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f4316cc0040>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f4316cc0940>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f4316c7fdf0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f4316c19910>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f4316c19d90>
          manager: <_pytest.config.PytestPluginManager object at 0x7f4317532820>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f4316e42ee0>
          startdir: /home/whiner/my/molecule/mobi_pci_buster
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: base64 [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: socket [assertion]
      early skip of rewriting module: _socket [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: uu [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      finish pytest_report_header --> [['rootdir: /home/whiner/my/molecule/mobi_pci_buster', 'plugins: testinfra-5.2.2'], ['using: pytest-6.0.1 pylib-1.9.0', 'setuptools registered plugins:', '  testinfra-5.2.2 at /home/whiner/.local/lib/python3.8/site-packages/testinfra/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/home/whiner/my/molecule/mobi_pci_buster'] [collection]
        pytest_collectstart [hook]
            collector: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/home/whiner/my/molecule/mobi_pci_buster'), []) [collection]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tasks
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tasks
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/vars
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/vars
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/handlers
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/handlers
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/meta
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/meta
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/.pytest_cache
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/defaults
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/defaults
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tests
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tests
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/.travis.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/.travis.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/.yamllint
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/.yamllint
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/README.md
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/README.md
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/p.yaml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/p.yaml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/pytestdebug.log
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/pytestdebug.log
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/files
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/files
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tasks
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tasks
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/vars
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/vars
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/handlers
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/handlers
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/meta
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/meta
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/templates
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/templates
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/defaults
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/defaults
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/.travis.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/.travis.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/.yamllint
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/.yamllint
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/README.md
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/README.md
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/defaults/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/defaults/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/handlers/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/handlers/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/meta/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/meta/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/INSTALL.rst
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/INSTALL.rst
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/converge.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/converge.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/molecule.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/molecule.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/verify.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/molecule/default/verify.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tasks/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tasks/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests/inventory
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests/inventory
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests/test.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/tests/test.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/vars/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/default/vars/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/defaults/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/defaults/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/handlers/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/handlers/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/meta/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/meta/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/files
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/files
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tasks
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tasks
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/vars
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/vars
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/handlers
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/handlers
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/meta
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/meta
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/templates
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/templates
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/defaults
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/defaults
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/.travis.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/.travis.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/.yamllint
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/.yamllint
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/README.md
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/README.md
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/defaults/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/defaults/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/handlers/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/handlers/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/meta/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/meta/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/INSTALL.rst
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/INSTALL.rst
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/converge.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/converge.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/molecule.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/molecule.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/verify.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/molecule/default/verify.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tasks/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tasks/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests/inventory
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests/inventory
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests/test.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/tests/test.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/vars/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/mobi_pci_buster/vars/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_directory [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/INSTALL.rst
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/INSTALL.rst
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/converge.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/converge.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/molecule.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/molecule.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/pytestdebug.log
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/pytestdebug.log
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/verify.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/verify.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py
                  parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module molecule/default/tests/test_default.py> [hook]
            finish pytest_collect_file --> [<Module molecule/default/tests/test_default.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tasks/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tasks/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/01proxy
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/01proxy
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/audit.conf
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/audit.conf
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/audit.rules
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/audit.rules
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/deb.mobi-money.ru.list
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/deb.mobi-money.ru.list
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/md.key
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/md.key
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/ntp
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/ntp
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/ntp.conf
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/ntp.conf
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/resolv.conf
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/resolv.conf
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/server.conf
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/templates/server.conf
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tests/inventory
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/tests/inventory
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/vars/main.yml
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/whiner/my/molecule/mobi_pci_buster/vars/main.yml
                parent: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module molecule/default/tests/test_default.py> [collection]
      pytest_collectstart [hook]
          collector: <Module molecule/default/tests/test_default.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module molecule/default/tests/test_default.py>
      find_module called for: test_default [assertion]
      matched test file '/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py' [assertion]
      _read_pyc(/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py): invalid or out of date pyc [assertion]
      rewriting PosixPath('/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py') [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __name__
            obj: test_default
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f4316cc0790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __spec__
            obj: ModuleSpec(name='test_default', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f4316cc0790>, origin='/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __file__
            obj: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __cached__
            obj: /home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/__pycache__/test_default.cpython-38.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/whiner/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: re
            obj: <module 're' from '/usr/lib/python3.8/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: pytest
            obj: <module 'pytest' from '/home/whiner/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_resolv_file
            obj: <function test_resolv_file at 0x7f4316b80e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b74df0>
          matched marked file 'testinfra.backend.ansible' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.ansible [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/backend/ansible.py [assertion]
          matched marked file 'testinfra.backend.base' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.base [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/backend/base.py [assertion]
          early skip of rewriting module: pipes [assertion]
          matched marked file 'testinfra.utils' (from 'testinfra') [assertion]
          find_module called for: testinfra.utils [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/utils/__init__.py [assertion]
          matched marked file 'testinfra.utils.ansible_runner' (from 'testinfra') [assertion]
          find_module called for: testinfra.utils.ansible_runner [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/utils/ansible_runner.py [assertion]
          early skip of rewriting module: ipaddress [assertion]
          matched marked file 'testinfra.backend.local' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.local [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/backend/local.py [assertion]
          early skip of rewriting module: encodings.unicode_escape [assertion]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_resolv_file[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_sysctl
            obj: <function test_sysctl at 0x7f43174aaaf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b74820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sysctl[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_pkg_unistall
            obj: <function test_pkg_unistall at 0x7f4316b303a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b74250>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pkg_unistall[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_myvar_using_debug_var
            obj: <function test_myvar_using_debug_var at 0x7f4316b30940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316c49e20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_myvar_using_debug_var[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_pkg_install
            obj: <function test_pkg_install at 0x7f4316b30430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316c6bdc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pkg_install[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_ntp
            obj: <function test_ntp at 0x7f4316b301f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316c6bf40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ntp[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_pwd_max_days
            obj: <function test_pwd_max_days at 0x7f4316b305e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316c7f1c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pwd_max_days[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_ClientAliveInterval
            obj: <function test_ClientAliveInterval at 0x7f4316b30310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316c7f3a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ClientAliveInterval[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_locales
            obj: <function test_locales at 0x7f4316b30dc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316acc8b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_locales[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_apt_proxy
            obj: <function test_apt_proxy at 0x7f4316b304c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316accaf0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apt_proxy[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_enabled_mobi_repo
            obj: <function test_enabled_mobi_repo at 0x7f4316b30280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316acce20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_enabled_mobi_repo[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_ssh_users
            obj: <function test_ssh_users at 0x7f4316b30160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316acc070>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ssh_users[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_sshd_setings
            obj: <function test_sshd_setings at 0x7f4316b300d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316acc430>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: yes
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: 3
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: 0
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: no
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: inet
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'
                argname: dir
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                val: aes128-ctr,aes192-ctr,aes256-ctr
                argname: value
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_check_rsyslog_server_conf
            obj: <function test_check_rsyslog_server_conf at 0x7f4316b30670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b41c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_check_rsyslog_auditd_conf
            obj: <function test_check_rsyslog_auditd_conf at 0x7f4316b30700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b37dc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_check_auditd_conf
            obj: <function test_check_auditd_conf at 0x7f4316b30790>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b41be0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_auditd_conf[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_common_account
            obj: <function test_common_account at 0x7f4316b30820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b37a90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_common_account[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_common_auth
            obj: <function test_common_auth at 0x7f4316b308b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b37730>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_common_auth[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: test_common_password
            obj: <function test_common_password at 0x7f4316b30a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f4316b37220>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_common_password[ansible://10.10.88.37]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x8f9e60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module molecule/default/tests/test_default.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'molecule/default/tests/test_default.py' lenresult=29 outcome='passed'> [hook]
    genitems <Function test_resolv_file[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_resolv_file[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sysctl[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sysctl[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_unistall[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_unistall[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_myvar_using_debug_var[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_install[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_install[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ntp[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ntp[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pwd_max_days[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pwd_max_days[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ClientAliveInterval[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_locales[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_locales[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apt_proxy[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apt_proxy[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_enabled_mobi_repo[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ssh_users[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ssh_users[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_auditd_conf[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_common_account[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_common_account[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_common_auth[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_common_auth[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_common_password[ansible://10.10.88.37]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_common_password[ansible://10.10.88.37]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'molecule/default/tests/test_default.py' lenresult=29 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f4316e42ee0>
          items: [<Function test_resolv_file[ansible://10.10.88.37]>, <Function test_sysctl[ansible://10.10.88.37]>, <Function test_pkg_unistall[ansible://10.10.88.37]>, <Function test_myvar_using_debug_var[ansible://10.10.88.37]>, <Function test_pkg_install[ansible://10.10.88.37]>, <Function test_ntp[ansible://10.10.88.37]>, <Function test_pwd_max_days[ansible://10.10.88.37]>, <Function test_ClientAliveInterval[ansible://10.10.88.37]>, <Function test_locales[ansible://10.10.88.37]>, <Function test_apt_proxy[ansible://10.10.88.37]>, <Function test_enabled_mobi_repo[ansible://10.10.88.37]>, <Function test_ssh_users[ansible://10.10.88.37]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>, <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>, <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>, <Function test_check_auditd_conf[ansible://10.10.88.37]>, <Function test_common_account[ansible://10.10.88.37]>, <Function test_common_auth[ansible://10.10.88.37]>, <Function test_common_password[ansible://10.10.88.37]>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f4316e42ee0>
            startdir: /home/whiner/my/molecule/mobi_pci_buster
            items: [<Function test_resolv_file[ansible://10.10.88.37]>, <Function test_sysctl[ansible://10.10.88.37]>, <Function test_pkg_unistall[ansible://10.10.88.37]>, <Function test_myvar_using_debug_var[ansible://10.10.88.37]>, <Function test_pkg_install[ansible://10.10.88.37]>, <Function test_ntp[ansible://10.10.88.37]>, <Function test_pwd_max_days[ansible://10.10.88.37]>, <Function test_ClientAliveInterval[ansible://10.10.88.37]>, <Function test_locales[ansible://10.10.88.37]>, <Function test_apt_proxy[ansible://10.10.88.37]>, <Function test_enabled_mobi_repo[ansible://10.10.88.37]>, <Function test_ssh_users[ansible://10.10.88.37]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>, <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>, <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>, <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>, <Function test_check_auditd_conf[ansible://10.10.88.37]>, <Function test_common_account[ansible://10.10.88.37]>, <Function test_common_auth[ansible://10.10.88.37]>, <Function test_common_password[ansible://10.10.88.37]>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
      pytest_warning_captured [hook]
          warning_message: {message : DeprecationWarning('invalid escape sequence \\s'), category : 'DeprecationWarning', filename : '/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py', lineno : 47, line : None}
          when: collect
          item: None
          location: None
      finish pytest_warning_captured --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('invalid escape sequence \\s'), category : 'DeprecationWarning', filename : '/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py', lineno : 47, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_captured [hook]
          warning_message: {message : DeprecationWarning('invalid escape sequence \\s'), category : 'DeprecationWarning', filename : '/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py', lineno : 124, line : None}
          when: collect
          item: None
          location: None
      finish pytest_warning_captured --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('invalid escape sequence \\s'), category : 'DeprecationWarning', filename : '/home/whiner/my/molecule/mobi_pci_buster/molecule/default/tests/test_default.py', lineno : 124, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session mobi_pci_buster exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=29>
      pytest_runtest_protocol [hook]
          item: <Function test_resolv_file[ansible://10.10.88.37]>
          nextitem: <Function test_sysctl[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 3, 'test_resolv_file[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_resolv_file[ansible://10.10.88.37]>>
          finish pytest_fixture_setup --> <testinfra.host.Host ansible://10.10.88.37> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_resolv_file[ansible://10.10.88.37]>>
          finish pytest_fixture_setup --> <testinfra.host.Host ansible://10.10.88.37> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_resolv_file[ansible://10.10.88.37]>
          matched marked file 'testinfra.modules.file' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.file [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/modules/file.py [assertion]
          matched marked file 'testinfra.modules.base' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.base [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/modules/base.py [assertion]
          matched marked file 'testinfra.modules.systeminfo' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.systeminfo [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/modules/systeminfo.py [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
            nextitem: <Function test_sysctl[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resolv_file[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_resolv_file[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 3, 'test_resolv_file[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sysctl[ansible://10.10.88.37]>
          nextitem: <Function test_pkg_unistall[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 7, 'test_sysctl[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sysctl[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
            nextitem: <Function test_pkg_unistall[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sysctl[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sysctl[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 7, 'test_sysctl[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_unistall[ansible://10.10.88.37]>
          nextitem: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 15, 'test_pkg_unistall[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_unistall[ansible://10.10.88.37]>
          matched marked file 'testinfra.modules.package' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.package [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/modules/package.py [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
            nextitem: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_unistall[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_pkg_unistall[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 15, 'test_pkg_unistall[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
          nextitem: <Function test_pkg_install[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 21, 'test_myvar_using_debug_var[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
            nextitem: <Function test_pkg_install[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_myvar_using_debug_var[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_myvar_using_debug_var[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 21, 'test_myvar_using_debug_var[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_install[ansible://10.10.88.37]>
          nextitem: <Function test_ntp[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 28, 'test_pkg_install[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_install[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
            nextitem: <Function test_ntp[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_install[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_pkg_install[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 28, 'test_pkg_install[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ntp[ansible://10.10.88.37]>
          nextitem: <Function test_pwd_max_days[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 38, 'test_ntp[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ntp[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
            nextitem: <Function test_pwd_max_days[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ntp[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_ntp[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 38, 'test_ntp[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pwd_max_days[ansible://10.10.88.37]>
          nextitem: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 43, 'test_pwd_max_days[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pwd_max_days[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
            nextitem: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pwd_max_days[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_pwd_max_days[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 43, 'test_pwd_max_days[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
          nextitem: <Function test_locales[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 51, 'test_ClientAliveInterval[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
            nextitem: <Function test_locales[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ClientAliveInterval[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_ClientAliveInterval[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 51, 'test_ClientAliveInterval[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_locales[ansible://10.10.88.37]>
          nextitem: <Function test_apt_proxy[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 57, 'test_locales[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_locales[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
            nextitem: <Function test_apt_proxy[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_locales[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_locales[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 57, 'test_locales[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apt_proxy[ansible://10.10.88.37]>
          nextitem: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 63, 'test_apt_proxy[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apt_proxy[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
            nextitem: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apt_proxy[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_apt_proxy[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 63, 'test_apt_proxy[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
          nextitem: <Function test_ssh_users[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 70, 'test_enabled_mobi_repo[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
            nextitem: <Function test_ssh_users[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_enabled_mobi_repo[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_enabled_mobi_repo[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 70, 'test_enabled_mobi_repo[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ssh_users[ansible://10.10.88.37]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 77, 'test_ssh_users[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ssh_users[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ssh_users[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_ssh_users[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 77, 'test_ssh_users[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_setup --> grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_setup --> yes [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_setup --> grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_setup --> 3 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_setup --> grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_setup --> 0 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_setup --> no [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
          nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_setup --> grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_setup --> inet [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
            nextitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
          nextitem: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]")
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_setup --> grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_setup --> aes128-ctr,aes192-ctr,aes256-ctr [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
            nextitem: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='value' scope='function' baseid=''>
              request: <SubRequest 'value' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dir' scope='function' baseid=''>
              request: <SubRequest 'dir' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport "molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]" when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]
            location: ('molecule/default/tests/test_default.py', 82, "test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]")
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
          nextitem: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 102, 'test_check_rsyslog_server_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
            nextitem: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_rsyslog_server_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 102, 'test_check_rsyslog_server_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
          nextitem: <Function test_check_auditd_conf[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 104, 'test_check_rsyslog_auditd_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
            nextitem: <Function test_check_auditd_conf[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_rsyslog_auditd_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 104, 'test_check_rsyslog_auditd_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
          nextitem: <Function test_common_account[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 106, 'test_check_auditd_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_auditd_conf[ansible://10.10.88.37]>
          matched marked file 'testinfra.modules.sudo' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.sudo [assertion]
          found cached rewritten pyc for /home/whiner/.local/lib/python3.8/site-packages/testinfra/modules/sudo.py [assertion]
            pytest_assertrepr_compare [hook]
                config: <_pytest.config.Config object at 0x7f4316e42ee0>
                op: ==
                left: aa8374287a745489a64ec3cbb5a70f90
                right: 9e6aefaefaf0ad20c986e7e9968f53d2
            early skip of rewriting module: difflib [assertion]
            finish pytest_assertrepr_compare --> [["'aa8374287a74...ec3cbb5a70f90' == '9e6aefaefaf0...6e7e9968f53d2'", '- 9e6aefaefaf0ad20c986e7e9968f53d2', '+ aa8374287a745489a64ec3cbb5a70f90']] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert 'aa8374287a74...ec3cbb5a70f90' == '9e6aefaefaf0...6e7e9968f53d2'\n  - 9e6aefaefaf0ad20c986e7e9968f53d2\n  + aa8374287a745489a64ec3cbb5a70f90") tblen=27>>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_check_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert 'aa8374287a74...ec3cbb5a70f90' == '9e6aefaefaf0...6e7e9968f53d2'\n  - 9e6aefaefaf0ad20c986e7e9968f53d2\n  + aa8374287a745489a64ec3cbb5a70f90") tblen=1>>
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
            nextitem: <Function test_common_account[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_auditd_conf[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 106, 'test_check_auditd_conf[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_common_account[ansible://10.10.88.37]>
          nextitem: <Function test_common_auth[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 112, 'test_common_account[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_common_account[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
            nextitem: <Function test_common_auth[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_account[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_account[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 112, 'test_common_account[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_common_auth[ansible://10.10.88.37]>
          nextitem: <Function test_common_password[ansible://10.10.88.37]>
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 116, 'test_common_auth[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_common_auth[ansible://10.10.88.37]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
            nextitem: <Function test_common_password[ansible://10.10.88.37]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_auth[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_auth[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 116, 'test_common_auth[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_common_password[ansible://10.10.88.37]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 122, 'test_common_password[ansible://10.10.88.37]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_common_password[ansible://10.10.88.37]>
        pytest_runtest_makereport [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert None\n +  where None = <function match at 0x7f43174e6ca0>('3cb0f1ccbc579dc6b75b9f771eb54efa', 'e7ade64946ce12d60d03816ae9708af1')\n +    where <function match at 0x7f43174e6ca0> = re.match") tblen=27>>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_common_password[ansible://10.10.88.37]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert None\n +  where None = <function match at 0x7f43174e6ca0>('3cb0f1ccbc579dc6b75b9f771eb54efa', 'e7ade64946ce12d60d03816ae9708af1')\n +    where <function match at 0x7f43174e6ca0> = re.match") tblen=1>>
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_password[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_password[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_auth[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_account[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ssh_users[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_enabled_mobi_repo[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_apt_proxy[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_locales[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ClientAliveInterval[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pwd_max_days[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ntp[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_install[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_myvar_using_debug_var[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_unistall[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sysctl[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_resolv_file[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_common_password[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_auth[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_common_auth[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_common_account[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_common_account[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_check_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_check_rsyslog_auditd_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_check_rsyslog_server_conf[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^Ciphers' /etc/ssh/sshd_config | awk '{print$NF}'-aes128-ctr,aes192-ctr,aes256-ctr]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AddressFamily' /etc/ssh/sshd_config | awk '{print$NF}'-inet]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ChallengeResponseAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^AllowTcpForwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^GSSAPIAuthentication' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^ClientAliveCountMax' /etc/ssh/sshd_config | awk '{print$NF}'-0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^UseDNS' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^MaxAuthTries' /etc/ssh/sshd_config | awk '{print$NF}'-3]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^X11Forwarding' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^IgnoreUserKnownHosts' /etc/ssh/sshd_config | awk '{print$NF}'-yes]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sshd_setings[ansible://10.10.88.37-grep -E '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print$NF}'-no]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ssh_users[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_ssh_users[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_enabled_mobi_repo[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_enabled_mobi_repo[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_apt_proxy[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_apt_proxy[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_locales[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_locales[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ClientAliveInterval[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_ClientAliveInterval[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pwd_max_days[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pwd_max_days[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_ntp[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_ntp[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_install[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_install[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_myvar_using_debug_var[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_myvar_using_debug_var[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_unistall[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_unistall[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_sysctl[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_sysctl[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_resolv_file[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_resolv_file[ansible://10.10.88.37]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_common_password[ansible://10.10.88.37]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f4316e42ee0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]
            location: ('molecule/default/tests/test_default.py', 122, 'test_common_password[ansible://10.10.88.37]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session mobi_pci_buster exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=2 testscollected=29>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f4316c7fdf0>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x7f4316e42ee0>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_check_auditd_conf[ansible://10.10.88.37]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f4316e42ee0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'molecule/default/tests/test_default.py::test_common_password[ansible://10.10.88.37]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f4316e42ee0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f4316e42ee0>
    finish pytest_unconfigure --> [] [hook]
