---
### tasks file for cluster_corosync_pacemaker_install

# Preparing

- name: Checking resource dictionary
  import_tasks: checking_resource_dict.yml

- name: Adding hosts in /etc/hosts
  lineinfile:
    path: /etc/hosts
    insertafter: "EOF"
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
  loop: "{{ nodes_list }}" 

- name: Checking cloud-init file exists
  stat:
    path: /etc/cloud/templates/hosts.debian.tmpl
  register: cloud_init

- name: Adding hosts in /etc/cloud/templates/hosts.debian.tmpl
  lineinfile:
    path: /etc/cloud/templates/hosts.debian.tmpl
    insertafter: "EOF"
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
  loop: "{{ nodes_list }}" 
  when: cloud_init.stat.exists

- name: Disabling autorun systemd services for use it in resources
  systemd_service:
    name: "{{ item.value.service_name }}"
    state: stopped
    enabled: false
  loop: "{{ resource_dict | dict2items }}"
  when: item.value.type == "systemd"
  ignore_errors: yes

- name: Removing old main packages if exists
  apt:
    name: "{{ packages_for_install }}"
    state: absent
    autoremove: yes
    purge: true
  ignore_errors: yes

# Installation

- name: Installing main packages
  apt:
    name: "{{ packages_for_install }}"
    update_cache: yes

- name: Changing password for "hacluster" user
  user:
    name: hacluster
    password: "{{ hacluster_pass | password_hash('sha512') }}"

- name: Make sure the service unit is enabled and started
  systemd_service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - corosync
    - pacemaker
    - pcsd

- name: Destroing old cluster if exists
  command: "pcs cluster destroy"

# Configuration

- name: Configuring cluster
  import_tasks: configure_cluster.yml
  when: inventory_hostname == nodes_list[0]

# Installation end

- name: Checking the configurations and if they are successful, restarting corosync service
  command: "pcs cluster verify --full"
  notify: Restart corosync service

